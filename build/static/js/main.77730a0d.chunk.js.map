{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","filterContact","connect","state","contactsItem","contacts","item","dispatch","onAdd","actions","useState","setName","setNumber","handleChange","event","currentTarget","value","className","s","form","onSubmit","preventDefault","find","toLowerCase","alert","label","type","input","onChange","button","ContactList","onDeleteContact","formContact","map","formContactItem","formContactButton","onClick","getVisibleContacts","allContacts","filter","normalizedFilter","contact","includes","propType","PropTypes","arrayOf","shape","string","func","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","itemReducer","createReducer","filterReducer","_","contactsReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactspersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.77730a0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContact\":\"ContactList_formContact__exLNQ\",\"formContactItem\":\"ContactList_formContactItem__BJcdq\",\"formContactButton\":\"ContactList_formContactButton__3OhFe\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport shortid from \"shortid\";\r\n// import { ADDCONTACT, DELCONTACT, FINDCONTACT } from \"./contact-types\";\r\n\r\nexport const addContact = createAction(\"Contact/addContact\", (name, number) => {\r\n  return {\r\n    payload: {\r\n      id: shortid.generate(),\r\n      name: name,\r\n      number: number,\r\n    },\r\n  };\r\n});\r\n// export const addContact = (name, number) => ({\r\n//   type: ADDCONTACT,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name: name,\r\n//     number: number,\r\n//   },\r\n// });\r\n\r\nexport const deleteContact = createAction(\"Contact/deleteContact\");\r\n// export const deleteContact = (idForDelete) => ({\r\n//   type: DELCONTACT,\r\n//   payload: idForDelete,\r\n// });\r\n\r\nexport const filterContact = createAction(\"Contact/ChangeFilter\");\r\n// export const filterContact = (value) => ({\r\n//   type: FINDCONTACT,\r\n//   payload: value,\r\n// });\r\n\r\nexport default { addContact, deleteContact, filterContact };\r\n","import { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport * as actions from \"../../redux/actions\";\r\nimport s from \"./ContactForm.module.css\";\r\n\r\nfunction ContactForm({ onAdd, contactsItem }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    switch (event.currentTarget.name) {\r\n      case \"name\":\r\n        setName(event.currentTarget.value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(event.currentTarget.value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    contactsItem.find((item) => item.name.toLowerCase() === name.toLowerCase())\r\n      ? alert(`${name} is already in contacts.`)\r\n      : onAdd(name, number);\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          className={s.input}\r\n          value={name}\r\n          onChange={handleChange}\r\n        ></input>\r\n      </label>\r\n\r\n      <label className={s.label}>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          className={s.input}\r\n          value={number}\r\n          onChange={handleChange}\r\n        ></input>\r\n      </label>\r\n\r\n      <button type=\"submit\" className={s.button}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    contactsItem: state.contacts.item,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAdd: (name, number) => dispatch(actions.addContact(name, number)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\n// class OldContactForm extends Component {\r\n//   state = {\r\n//     name: \"\",\r\n//     number: \"\",\r\n//   };\r\n\r\n//   handleChange = (event) => {\r\n//     this.setState({ [event.currentTarget.name]: event.currentTarget.value });\r\n//   };\r\n\r\n//   handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     this.setState({ name: \"\", number: \"\" });\r\n//     this.props.onAdd(this.state.name, this.state.number);\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <form className={s.form} onSubmit={this.handleSubmit}>\r\n//         <label className={s.label}>\r\n//           Name\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             className={s.input}\r\n//             value={this.state.name}\r\n//             onChange={this.handleChange}\r\n//           ></input>\r\n//         </label>\r\n\r\n//         <label className={s.label}>\r\n//           Number\r\n//           <input\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             className={s.input}\r\n//             value={this.state.number}\r\n//             onChange={this.handleChange}\r\n//           ></input>\r\n//         </label>\r\n\r\n//         <button type=\"submit\" className={s.button}>\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default ContactForm;\r\n\r\nContactForm.propTypes = {\r\n  onAdd: PropTypes.func,\r\n};\r\n","import { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { deleteContact } from \"../../redux/actions\";\r\nimport s from \"./ContactList.module.css\";\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n  // console.log(\"!!!contacts in ContactsList\", contacts);\r\n  // console.log(\"!!!state.contacts.items\", contacts);\r\n\r\n  return (\r\n    <ul className={s.formContact}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.formContactItem}>\r\n          {name}: {number}\r\n          <button\r\n            className={s.formContactButton}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getVisibleContacts(state.contacts.item, state.contacts.filter),\r\n});\r\n\r\n// const mapStateToProps = (state) => {\r\n//   const { item, filter } = state.contacts;\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   const visibleContacts = item.filter((data) =>\r\n//     data.name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n\r\n//   return {\r\n//     contacts: visibleContacts,\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onDeleteContact: (id) => dispatch(deleteContact(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.propType = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    })\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport actions from \"../../redux/actions\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return <input type=\"text\" value={value} onChange={onChange}></input>;\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (event) =>\r\n    dispatch(actions.filterContact(event.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n","// import { useState, useEffect } from \"react\";\r\n// import { connect } from \"react-redux\";\r\n\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport ContactList from \"./components/ContactList\";\r\nimport Filter from \"./components/Filter\";\r\n// import * as actions from \"./redux/actions\";\r\n// import shortid from \"shortid\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  // const [filter, setFilter] = useState(\"\");\r\n  // const [contacts, setContacts] = useState(() => {\r\n  // return JSON.parse(window.localStorage.getItem(\"savedContacts\"));\r\n  // ??\r\n  // contactsDefault\r\n\r\n  // return (\r\n  //   JSON.parse(window.localStorage.getItem(\"savedContacts\")) ?? contactAdded\r\n  // );\r\n\r\n  //   return contactAdded;\r\n  // });\r\n\r\n  // useEffect(() => {\r\n  //   setContacts(contactAdded);\r\n  // }, [contactAdded]);\r\n\r\n  // contactAdded ?? setContacts(contactAdded);\r\n  // console.log(\"!!!contacts\", contacts);\r\n  // console.log(\"!!!contactAdded\", contactAdded);\r\n\r\n  //+\r\n\r\n  // const addContact = (name, number) => {\r\n  //   //+\r\n  //   const contact = {\r\n  //     id: shortid.generate(),\r\n  //     name: name,\r\n  //     number: number,\r\n  //   };\r\n\r\n  //   contacts.find(\r\n  //     ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\r\n  //   )\r\n  //     ? alert(`${name} is already in contacts.`)\r\n  //     : setContacts((prevState) => [contact, ...prevState]);\r\n  // };\r\n\r\n  //+\r\n  // const deleteContact = (idForDelete) => {\r\n  //   setContacts((prevState) =>\r\n  //     prevState.filter((contact) => contact.id !== idForDelete)\r\n  //   );\r\n  // };\r\n\r\n  //+\r\n  // const changeFilter = (event) => {\r\n  //   setFilter(event.currentTarget.value);\r\n  // };\r\n\r\n  // ***GO TO ContactList\r\n  // const visibleContacts = () => {\r\n  //   const normalizedFilter = filter.toLowerCase();\r\n\r\n  //   return contacts.filter((contact) =>\r\n  //     contact.name.toLowerCase().includes(normalizedFilter)\r\n  //   );\r\n  // };\r\n  // ***GO TO ContactList\r\n\r\n  // useEffect(() => {\r\n  //   window.localStorage.setItem(\"savedContacts\", JSON.stringify(contacts));\r\n  // }, [contacts]);\r\n\r\n  // const contactsFromLocalStorage = localStorage.getItem(\"savedContacts\");\r\n  // const parsedContactsFromLocalStorage = JSON.parse(contactsFromLocalStorage);\r\n\r\n  return (\r\n    <>\r\n      <h1>Phonebook</h1>\r\n      {/* <ContactForm onAdd={addContact} /> */}\r\n      <ContactForm />\r\n\r\n      <h3>Find contacts by name</h3>\r\n      {/* <Filter value={filter} onChange={changeFilter} /> */}\r\n      <Filter />\r\n      <h2>Contacts</h2>\r\n      <ContactList\r\n      // contacts={visibleContacts()}\r\n      // onDeleteContact={deleteContact}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     // addContact: state.payload,\r\n//     nameAdd: state.payload.name,\r\n//     numberAdd: state.payload.number,\r\n//   };\r\n// };\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     contactAdded: state.contacts.items,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     addContact: () =>\r\n//       dispatch(\r\n//         actions.addContact(\r\n//           mapStateToProps.payload.name,\r\n//           mapStateToProps.payload.number\r\n//         )\r\n//       ),\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps, null)(App);\r\nexport default App;\r\n\r\n// CLASSES\r\n// class OldApp extends Component {\r\n// +   state = {\r\n// +     contacts: [\r\n// +       { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n// +       { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n// +       { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n// +       { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n// +     ],\r\n//     filter: \"\",\r\n//   };\r\n\r\n// +   addContact = (name, number) => {\r\n// +     const contact = {\r\n// +       id: shortid.generate(),\r\n// +       name: name,\r\n// +       number: number,\r\n// +     };\r\n\r\n//     this.state.contacts.find(\r\n//       ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\r\n//     )\r\n//       ? alert(`${name} is already in contacts.`)\r\n//       : this.setState((prevState) => ({\r\n//           contacts: [contact, ...prevState.contacts],\r\n//         }));\r\n//   };\r\n\r\n//   deleteContact = (idForDelete) => {\r\n//     this.setState((prevState) => ({\r\n//       contacts: prevState.contacts.filter(\r\n//         (contact) => contact.id !== idForDelete\r\n//       ),\r\n//     }));\r\n//   };\r\n\r\n//   changeFilter = (event) => {\r\n//     this.setState({ filter: event.currentTarget.value });\r\n//   };\r\n\r\n//   visibleContacts = () => {\r\n//     const normalizedFilter = this.state.filter.toLowerCase();\r\n//     return this.state.contacts.filter((contact) =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter)\r\n//     );\r\n//   };\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (this.state.contacts !== prevState.contacts) {\r\n//       localStorage.setItem(\r\n//         \"savedContacts\",\r\n//         JSON.stringify(this.state.contacts)\r\n//       );\r\n//     }\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     const contactsFromLocalStorage = localStorage.getItem(\"savedContacts\");\r\n//     const parsedContactsFromLocalStorage = JSON.parse(contactsFromLocalStorage);\r\n\r\n//     parsedContactsFromLocalStorage\r\n//       ? this.setState({ contacts: parsedContactsFromLocalStorage })\r\n//       : this.setState({ contacts: this.state.contacts });\r\n//     // this.setState({ contacts: parsedContactsFromLocalStorage });\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <h1>Phonebook</h1>\r\n//         <ContactForm onAdd={this.addContact} />\r\n\r\n//         <h3>Find contacts by name</h3>\r\n//         <Filter value={this.state.filter} onChange={this.changeFilter} />\r\n\r\n//         <h2>Contacts</h2>\r\n//         <ContactList\r\n//           contacts={this.visibleContacts()}\r\n//           onDeleteContact={this.deleteContact}\r\n//         />\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  configureStore,\r\n  createReducer,\r\n  getDefaultMiddleware,\r\n} from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport actions from \"./actions\";\r\n// import { ADDCONTACT, DELCONTACT, FINDCONTACT } from \"./contact-types\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst contacts = {\r\n  items: [\r\n    { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n    { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n    { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n    { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n  ],\r\n  filter: \"\",\r\n};\r\n\r\nconst itemReducer = createReducer(contacts.items, {\r\n  [actions.addContact]: (state, { payload }) => [payload, ...state],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n// const itemReducer = (state = contacts.items, { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADDCONTACT:\r\n//       return [payload, ...state];\r\n//     case DELCONTACT:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filterReducer = createReducer(contacts.filter, {\r\n  [actions.filterContact]: (_, { payload }) => payload,\r\n});\r\n// const filterReducer = (state = contacts.filter, { type, payload }) => {\r\n//   switch (type) {\r\n//     case FINDCONTACT:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst contactsReducer = combineReducers({\r\n  item: itemReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactspersistConfig = {\r\n  key: \"savedContacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\n// const rootRedusers = combineReducers({\r\n//   contacts: persistReducer(persistConfig, contactsReducer),\r\n// });\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactspersistConfig, contactsReducer),\r\n  },\r\n  middleware: middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1FF6-\",\"label\":\"ContactForm_label__1Dv8N\",\"input\":\"ContactForm_input__2O8Ku\",\"button\":\"ContactForm_button__2ZutV\"};"],"sourceRoot":""}